{
	// Place your snippets for systemverilog here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"ifndef_def": {
		"prefix": "ifndef_def",
		"body": [
			"`ifndef ${1:DEFINE}",
			"  `define $1 ${2: Value}",
			"`endif"
		],
		"description": "Debug $dispaly message with filename"
	},

	"Debug Message": {
		"prefix": "$dbg",
		"body": [
			"$$display(\"DA_DBG : ${1:${TM_FILENAME_BASE}} : $2\");",
			"$3"
		],
		"description": "Debug $dispaly message with filename"
	},

	"Border-": {
		"prefix": "$-",
		"body": [
			"//-----------------------------------------------------------------------------",
			"$1"
		],
		"description": "Borders for comments"
	},

	"object_new": {
		"prefix": "new",
		"body": [
			"// Function : new",
			"function new(string name = \"\");",
			"  super.new(name);",
			"  $1",
			"endfunction : new"
		],
		"description": "Constructor for UVM_OBJECT"
	},

	"component_new": {
		"prefix": "new",
		"body": [
			"// Function : new",
			"function new(string name = \"\", uvm_component parent = null);",
			"  super.new(name, parent);",
			"  $1",
			"endfunction : new"
		],
		"description": "Constructor for UVM_COMPONENT"
	},

	"do_while": {
		"prefix": "do_while",
		"body": [
			"do begin",
			"$2",
      "end while ($1);"
		],
		"description": "SV do_while loop"
	},

	"uvm_field_enum": {
		"prefix": "uvm_field_enum",
		"body": [
			"`uvm_field_enum(${1:T}, ${2:ARG}, ${3:UVM_DEFAULT})"
		],
		"description": "UVM field macro for enum"
	},

	"do_pack_bytes": {
		"prefix": "do_pack_bytes",
		"body": [
			"packer.pack_bytes(${1:value}, $$bits(${1}));"
		],
		"description": "UVM do_pack pack_bytes"
	}

}

